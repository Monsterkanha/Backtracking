class Solution {
public:
    void backtrack(vector<vector<int>>& ans,vector<int>& nums,int begin = 0){
        if(nums.size() == begin)    ans.push_back(nums);
        for(int i = begin; i < nums.size(); i++){
            swap(nums[i], nums[begin]);   // It will create a new permutation.
            backtrack(ans, nums,begin + 1);  // We need to take all the element that's why begin + 1.
            swap(nums[begin], nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
        backtrack(ans, nums);
        return ans;
    }
};


2. Duplicates.

class Solution {
public:
    void backtrack(vector<vector<int>>& ans,vector<int>& used, vector<int>& nums, vector<int>& curr){
        if(curr.size() == nums.size())    ans.push_back(curr);
        for(int i = 0 ; i < nums.size(); i++){
            if(used[i] || i > 0 && nums[i] == nums[i-1] && !used[i-1]) continue;
            used[i] = 1;
            curr.push_back(nums[i]);
            backtrack(ans,used, nums,curr);
            curr.pop_back();
            used[i] =0;
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin() , nums.end());
        int n = nums.size();
        vector<int> used(n,0) , curr;
        backtrack(ans,used, nums, curr);
        return ans;
    }
};

or


class Solution {
public:
    void backtrack(vector<vector<int>>& ans,vector<int> nums,int begin = 0){
        if(nums.size() == begin)    ans.push_back(nums);
        for(int i = begin; i < nums.size(); i++){
            if(i != begin && nums[i] == nums[begin]) continue;
            swap(nums[i], nums[begin]);
            backtrack(ans, nums,begin + 1);
            // swap(nums[begin], nums[i]);
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        backtrack(ans, nums);
        return ans;
    }
};
